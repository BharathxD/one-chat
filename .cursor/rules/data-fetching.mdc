---
description: Fetching data from the API using SWR
globs: 
alwaysApply: false
---
# Data Fetching with tRPC

We use **tRPC** for type-safe data fetching in the T3 Chat Clone. tRPC provides end-to-end type safety, excellent performance, and seamless integration with our Next.js 15 + TypeScript 19 stack.

## Architecture Overview

- **tRPC Router**: Server-side API definitions with full type safety
- **tRPC Client**: Client-side hooks for queries and mutations
- **React Query Integration**: Built-in caching and state management
- **Real-time Support**: WebSocket subscriptions for live updates

## Setup Requirements

### 1. Install Dependencies
```bash
pnpm add @trpc/server @trpc/client @trpc/react-query @trpc/next @tanstack/react-query @tanstack/react-query-devtools
```

### 2. Project Structure
```
apps/web/
├── app/
│   └── api/
│       └── trpc/
│           └── [trpc]/
│               └── route.ts        # tRPC API handler
├── lib/
│   ├── trpc/
│   │   ├── server.ts              # Server-side tRPC setup
│   │   ├── client.ts              # Client-side tRPC setup
│   │   └── react.tsx              # React hooks and providers
│   └── db/
│       └── schema/                # Drizzle schemas
└── server/
    └── api/
        ├── root.ts                # Main tRPC router
        ├── routers/
        │   ├── chat.ts            # Chat-related procedures
        │   ├── user.ts            # User-related procedures
        │   └── ai.ts              # AI model procedures
        └── context.ts             # Request context
```

## Usage Patterns

### 1. Queries (Data Fetching)
```typescript
import { api } from "~/lib/trpc/react";

export function ChatHistory() {
  const { data: chats, isLoading, error } = api.chat.getHistory.useQuery({
    limit: 50,
    cursor: undefined,
  });

  if (isLoading) return <div>Loading chats...</div>;
  if (error) return <div>Error: {error.message}</div>;

  return (
    <div>
      {chats?.map((chat) => (
        <ChatMessage key={chat.id} chat={chat} />
      ))}
    </div>
  );
}
```

### 2. Mutations (Data Modification)
```typescript
import { api } from "~/lib/trpc/react";

export function SendMessage() {
  const utils = api.useUtils();
  const sendMessage = api.chat.send.useMutation({
    onSuccess: () => {
      // Invalidate and refetch chat history
      utils.chat.getHistory.invalidate();
    },
  });

  const handleSend = (message: string) => {
    sendMessage.mutate({
      content: message,
      chatId: "current-chat-id",
    });
  };

  return (
    <button 
      onClick={() => handleSend("Hello")}
      disabled={sendMessage.isPending}
    >
      {sendMessage.isPending ? "Sending..." : "Send"}
    </button>
  );
}
```

### 3. Infinite Queries (Pagination)
```typescript
import { api } from "~/lib/trpc/react";

export function InfiniteChatList() {
  const {
    data,
    fetchNextPage,
    hasNextPage,
    isFetchingNextPage,
  } = api.chat.getInfiniteHistory.useInfiniteQuery(
    { limit: 20 },
    {
      getNextPageParam: (lastPage) => lastPage.nextCursor,
    }
  );

  return (
    <div>
      {data?.pages.map((page) =>
        page.chats.map((chat) => (
          <ChatMessage key={chat.id} chat={chat} />
        ))
      )}
      
      {hasNextPage && (
        <button onClick={() => fetchNextPage()}>
          {isFetchingNextPage ? "Loading..." : "Load More"}
        </button>
      )}
    </div>
  );
}
```

### 4. Real-time Subscriptions
```typescript
import { api } from "~/lib/trpc/react";

export function LiveChat({ chatId }: { chatId: string }) {
  const { data: messages } = api.chat.getMessages.useQuery({ chatId });
  
  // Subscribe to new messages
  api.chat.onNewMessage.useSubscription(
    { chatId },
    {
      onData: (newMessage) => {
        // Update local cache with new message
        utils.chat.getMessages.setData({ chatId }, (oldData) => {
          return oldData ? [...oldData, newMessage] : [newMessage];
        });
      },
    }
  );

  return (
    <div>
      {messages?.map((msg) => (
        <Message key={msg.id} message={msg} />
      ))}
    </div>
  );
}
```

### 5. Optimistic Updates
```typescript
import { api } from "~/lib/trpc/react";

export function OptimisticMessageSend() {
  const utils = api.useUtils();
  
  const sendMessage = api.chat.send.useMutation({
    onMutate: async (newMessage) => {
      // Cancel outgoing refetches
      await utils.chat.getMessages.cancel();
      
      // Snapshot previous value
      const previousMessages = utils.chat.getMessages.getData();
      
      // Optimistically update cache
      utils.chat.getMessages.setData(
        { chatId: newMessage.chatId },
        (old) => old ? [...old, { ...newMessage, id: "temp", isPending: true }] : []
      );
      
      return { previousMessages };
    },
    onError: (err, newMessage, context) => {
      // Rollback on error
      utils.chat.getMessages.setData(
        { chatId: newMessage.chatId },
        context?.previousMessages
      );
    },
    onSettled: () => {
      // Refetch after mutation
      utils.chat.getMessages.invalidate();
    },
  });

  return (
    <form onSubmit={(e) => {
      e.preventDefault();
      sendMessage.mutate({ content: "Hello", chatId: "chat-1" });
    }}>
      {/* form content */}
    </form>
  );
}
```

## Performance Best Practices

### 1. Strategic Caching
```typescript
// Enable background refetching for frequently accessed data
const { data } = api.chat.getHistory.useQuery(
  { limit: 50 },
  {
    staleTime: 1000 * 60 * 5, // 5 minutes
    cacheTime: 1000 * 60 * 10, // 10 minutes
    refetchOnWindowFocus: false,
  }
);
```

### 2. Batch Requests
```typescript
// tRPC automatically batches multiple queries made simultaneously
const chatData = api.chat.getHistory.useQuery();
const userData = api.user.getProfile.useQuery();
const settingsData = api.user.getSettings.useQuery();
// These will be batched into a single HTTP request
```

### 3. Prefetching
```typescript
export async function getServerSideProps() {
  const trpc = createTRPCServerSideHelper();
  
  // Prefetch data on server
  await trpc.chat.getHistory.prefetch({ limit: 50 });
  
  return {
    props: {
      trpcState: trpc.dehydrate(),
    },
  };
}
```

## Integration with Existing Stack

### With Drizzle ORM
```typescript
// In your tRPC router
export const chatRouter = createTRPCRouter({
  getHistory: publicProcedure
    .input(z.object({ limit: z.number() }))
    .query(async ({ input, ctx }) => {
      return await ctx.db
        .select()
        .from(chats)
        .limit(input.limit)
        .orderBy(desc(chats.createdAt));
    }),
});
```

### With AI Streaming
```typescript
// For AI streaming responses
export const aiRouter = createTRPCRouter({
  streamChat: publicProcedure
    .input(z.object({ message: z.string() }))
    .subscription(async function* ({ input }) {
      const stream = await generateAIResponse(input.message);
      
      for await (const chunk of stream) {
        yield { content: chunk, isComplete: false };
      }
      
      yield { content: "", isComplete: true };
    }),
});
```

### With Redis Pub/Sub
```typescript
// Real-time message broadcasting
export const chatRouter = createTRPCRouter({
  sendMessage: publicProcedure
    .input(z.object({ content: z.string(), chatId: z.string() }))
    .mutation(async ({ input, ctx }) => {
      const message = await ctx.db.insert(messages).values(input);
      
      // Broadcast to Redis
      await ctx.redis.publish(`chat:${input.chatId}`, JSON.stringify(message));
      
      return message;
    }),
});
```

## Error Handling

```typescript
import { TRPCError } from "@trpc/server";

export const chatRouter = createTRPCRouter({
  deleteMessage: publicProcedure
    .input(z.object({ messageId: z.string() }))
    .mutation(async ({ input, ctx }) => {
      const message = await ctx.db.query.messages.findFirst({
        where: eq(messages.id, input.messageId),
      });
      
      if (!message) {
        throw new TRPCError({
          code: "NOT_FOUND",
          message: "Message not found",
        });
      }
      
      if (message.userId !== ctx.user?.id) {
        throw new TRPCError({
          code: "FORBIDDEN",
          message: "You can only delete your own messages",
        });
      }
      
      return await ctx.db.delete(messages).where(eq(messages.id, input.messageId));
    }),
});
```

## Next Steps

1. Set up tRPC server in `lib/trpc/server.ts`
2. Create tRPC client in `lib/trpc/client.ts`
3. Add React providers in `lib/trpc/react.tsx`
4. Create API routes in `app/api/trpc/[trpc]/route.ts`
5. Build your first router in `server/api/routers/`